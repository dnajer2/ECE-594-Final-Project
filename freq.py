
#Function that creates the symbol table by reading in the character spikes generated by
#Octave. If the character is already in the "table", the character count will increase, otherwise
#a new entry will be created
def createSymbolTable():
    #initialize everything
    f=open("Character Spikes", "r")
    symbolTable={}
    sequence=[]

    #read in lines generated by octave
    f1=f.readlines()
    try:
        for lineInF in f1: #truncate the values
            split=(lineInF.split())
            spikeValue="%.2f" % float(split[3])        



            entryFlag=False

            # if entry exists, increase entry occurence, otherwise create a new entry
            for entry in symbolTable:
                if errorMargin(entry, spikeValue):
                    symbolTable[entry]=symbolTable[entry]+1
                    sequence.append(entry)
                    entryFlag=True
                    break

            if entryFlag==False:
                symbolTable[spikeValue]=1
                sequence.append(spikeValue)
    except:
        pass


    f.close()
    return [symbolTable, sequence]


#Function to assign each sound to a character. The most recorded sound will be an "e",
#second most recorded will be an "t" etc..
def assignFreq(symbolTable, fTable):
    updatedSymbolTable={}
    fTable.reverse()
    while (len(symbolTable)>0):
        maxSymbol=max(symbolTable, key=symbolTable.get) #find current max
        updatedSymbolTable[maxSymbol]=[symbolTable[maxSymbol],fTable[-1]] #add appended entry to new table
        symbolTable.pop(maxSymbol) #pop off entry from old table
        fTable.pop() #pop off letters that have already been assigned

        
    return updatedSymbolTable


#Function to create an error margin for audio samples. Frequencies for a certain keyboard key may not
# always be the same, but they have been recorded to be within +-.01 of each other. This function will
#determine if the audio frequency falls within the range of an exisitng key, or if a new entry will need
#to be made in the symbol table
def errorMargin(entry, readIn):
    #min=float(entry)-.01
    #max=float(entry)+.01

    min=float(entry)-2
    max=float(entry)+2
    if (float(readIn) >= min) and (float(readIn) <= max):
        return True
    else:
        return False

#Function to neatly print out the text formed by the keyboard frequencies.
def textPrinter(symbolTable, sequence):
    text=[]

    for entry in sequence:
        try:
            text.append(symbolTable[entry][1])

            #text.append(symbolTable.get(entry)[1])
        except:
            pass

    textString=""
    textString=textString.join(text)
    print("potenial text: " + textString)
    #return textString

#Function to adjust the letter each frequency will represent.
#Frequency table is set from most common letter to least common letter
#sll will shift towards most common letter (unless you reach 'e', then it wraps around)
#slr will shift towards least common letter (unless you reach 'z', then it wraps around)
def adjustSymbolTable(symbolTable, fTable, key, shifter):
    position=fTable.index(str(symbolTable.get(key)[1]))
    #print(position)
    #print(position+shifter)
    #shifter=1 for sll, shifter=-1 for slr
    if (position+shifter) == len(fTable): #handle sll wrap around 
        symbolTable[key][1]=fTable[0]
        return symbolTable

    elif (position+shifter) < 0:
        symbolTable[key][1]=fTable[-1] #handle slr wrap around
        return symbolTable
    else:
        symbolTable[key][1]=fTable[position+shifter] #handle any command
        return symbolTable

    return symbolTable

#function to neatly print the symbol table
def printSymbolTable(symbolTable):
    print("\nSymbol Table: ")
    for entry in symbolTable:
        print("frequency: "+ str(entry) + ", occurences: " + str(symbolTable[entry][0])+ ", assigned letter: " + str(symbolTable[entry][1]) )
    print("\n")

def helpScreen():
    print("\nCommands: ")
    print("'print symbol table' : prints the symbol table created and used by the program ")
    print("'print reference table' : prints the table of letter frequencies in English language")
    print("'sll _' will adjust the letter assigned to a frequency by shifting the reference table to the left")
    print("'slr _' will adjust the letter assigned to a frequency by shifting the reference table to the right")
    print("'addi $I $0' will directly assign a frequency ($I) to a letter ($O)")
    print("'help' : will bring up this dialogue")
    print("'quit' : will quit the program\n")    




def main():
    #frequency table of letters
    fTable=[" ","e", "t","a","o","i","n","s","h","r","d","l","u","c","m","w","f","y","g","b","v","k","x","j","q","z"]

    [symbolTable, sequence]=createSymbolTable()
    #print(symbolTable)
    #print(sequence)

    symbolTable=assignFreq(symbolTable, fTable.copy())
    print("/----------------------------------------------------------------/")
    print("/--------------Frequency Analysis Helper v1 ---------------------/")
    print("/----------------------------------------------------------------/\n")


    helpScreen()

    while True:
        print("\nsymbol order: "+ str(sequence))
        textPrinter(symbolTable, sequence)

        userInput=input(">>")
        userInputCMD=userInput.split()

        try:

            if userInput == "quit":
                break
            elif userInputCMD[0] =="sll":
                print(userInputCMD[1])
                symbolTable=adjustSymbolTable(symbolTable, fTable.copy(), userInputCMD[1], 1)
            elif userInputCMD[0]=="slr":
                symbolTable=adjustSymbolTable(symbolTable, fTable.copy(), userInputCMD[1], -1)
            elif userInput== "print symbol table":
                printSymbolTable(symbolTable)
            elif userInput== "print reference table":
                print(fTable)
            elif userInputCMD[0]== "addi":
                symbolTable[userInputCMD[1]][1]=userInputCMD[2]
            elif userInput == "help":
                helpScreen()
        except:
            pass

        # try:
        #     elif userInputCMD[0] =="sll":
        #         print(userInputCMD[1])
        #         symbolTable=adjustSymbolTable(symbolTable, fTable.copy(), userInputCMD[1], 1)
        #     elif userInputCMD[0]=="slr":
        #         symbolTable=adjustSymbolTable(symbolTable, fTable.copy(), userInputCMD[1], -1)

        # except:
        #     pass
        
        #print("Input not recognized")        
        






    








if __name__ == "__main__":
    main()